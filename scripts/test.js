const hre = require("hardhat");
// let {getConfig} = require("../tasks/config")

let ERC20 = [
    "function approve(address spender, uint256 amount) external returns (bool)",
    "function balanceOf(address account) external view returns (uint256)",
    "function transfer(address to, uint value) external returns (bool)",
];

let swap_abi = [
    "function swapExactTokensForTokens(uint amountIn,uint amountOutMin,address[] calldata path,address to,uint deadline) external",
    "function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)external payable",
];

//0xce16F69375520ab01377ce7B88f5BA8C48F8D666
let squid_abi = [
    "function callBridgeCall(address token,uint256 amount,tuple(uint8,address,uint256,bytes,bytes)[] calldata calls,string calldata bridgedTokenSymbol,string calldata destinationChain,string calldata destinationAddress, bytes calldata payload, address gasRefundRecipient,bool enableExpress) external payable ",
];

async function main() {
    // let [wallet] = await ethers.getSigners();
    // console.log("wallet",wallet.address);
    // let mos_addr = "0x1fF45a374f01CA49e137dD87b26DCA7b2c64C203"
    // let wToken = "0xF6D226f9Dc15d9bB51182815b320D3fBE324e1bA";
    let ButterRouterV2 = await ethers.getContractFactory("ButterRouterV2");

    let data = "0x480a3411000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005aea5775959fbc2557cc8789bc1bf90a239d9a910000000000000000000000005aea5775959fbc2557cc8789bc1bf90a239d9a910000000000000000000000002fad88df5c049991005bfa9715157b36e900a24e0000000000000000000000005aea5775959fbc2557cc8789bc1bf90a239d9a9100000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000004d0e30db00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000058f8000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000142fad88df5c049991005bfa9715157b36e900a24e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"

    let f = ButterRouterV2.interface.decodeFunctionData("swapAndBridge",data)

    console.log(f);
    if (f._swapData !== "0x") {
        let swapData = ethers.utils.defaultAbiCoder.decode(
            ["tuple(uint8,address,address,address,address,uint256,bytes)"],
            f._swapData
        );
        console.log("swapData==================", swapData);
    }

    if (f._bridgeData !== "0x") {
        console.log(f._bridgeData);
        let callData = ethers.utils.defaultAbiCoder.decode(["tuple(uint256,bytes,bytes)"], f._bridgeData);
        console.log("callData=========================", callData);
    }
    
    // let router = ButterRouterV2.attach("0xf1cecACB252978266244E4339ad845e6DBd08087");

    // await (await router.setAuthorization(["0x002162B2aEe2dD657FB131b28CC34deE6797b66f"],true)).wait();
    // console.log("router:",router.address);


}

async function buildSwapData() {
    // let [wallet] = await ethers.getSigners();
    let wallet = "0xa62A412956a8772161a27Bd11854FC9C116eE767";
    let SwapAdapter = await ethers.getContractFactory("SwapAdapter");
    let adapt_addr = "0x002162B2aEe2dD657FB131b28CC34deE6797b66f"
    let swapData = await buildMerlinSwapData();
    let SwapParam = {
        dexType: 0,
        callTo: "0x1afa5d7f89743219576ef48a9826261be6378a68", //merlin swap
        approveTo: "0x1afa5d7f89743219576ef48a9826261be6378a68",
        fromAmount: ethers.utils.parseEther("1"),
        callData: swapData,
    };
    let dstToken = "0xbd40c74cb5cf9f9252B3298230Cb916d80430bBa";
    let param = {
        srcToken: "0x0A3BB08b3a15A19b4De82F8AcFc862606FB69A2D", //iZUMi Bond USD
        dstToken: dstToken,
        receiver: ethers.constants.AddressZero,
        leftReceiver: wallet,
        minAmount: 0,
        swaps: [SwapParam],
    };
    let adapterData = SwapAdapter.interface.encodeFunctionData("swap", [param])
    let swap = ethers.utils.defaultAbiCoder.encode(
        ["tuple(uint8,address,address,address,address,uint256,bytes)"],
        [[0, adapt_addr, adapt_addr, wallet, dstToken, 0, adapterData]]
    );
    let swapAndCall = ethers.utils.defaultAbiCoder.encode(["bytes", "bytes"], [swap, "0x"]);
    return swapAndCall;
}

async function buildMerlinSwapData() {
    //0xbd40c74cb5cf9f9252b3298230cb916d80430bba0027100a3bb08b3a15a19b4de82f8acfc862606fb69a2d         
    let path = "0x0A3BB08b3a15A19b4De82F8AcFc862606FB69A2D002710bd40c74cb5cf9f9252B3298230Cb916d80430bBa"
    let receiver = "0x002162B2aEe2dD657FB131b28CC34deE6797b66f";
    let amountIn = ethers.utils.parseEther("1");
    let minAmountOut = 0;
    let deadline = "1715731642";
    let func = "0x75ceafe6"
    let swap = ethers.utils.defaultAbiCoder.encode(
        ["tuple(bytes,address,uint128,uint256,uint256)"],
        [[path, receiver,amountIn,minAmountOut,deadline]]
    )

    return func + swap.substring(2);
}

async function celo() {
    let [wallet] = await ethers.getSigners();

    //  let result = await ethers.utils.defaultAbiCoder.decode(['address','uint256','tuple(uint8,address,uint256,bytes,bytes)[]','string','string','string','bytes','address','bool'],data);

    // console.log(result)
    //   struct Call {
    //     CallType callType;
    //     address target;
    //     uint256 value;
    //     bytes callData;
    //     bytes payload;
    // }
    // enum CallType {
    //   Default,
    //   FullTokenBalance,
    //   FullNativeBalance,
    //   CollectTokenBalance
    // }
    //   swapExactTokensForTokens(uint256,uint256,address[],address,uint256)
    let s = await ethers.getContractAt(squid_abi, "0xce16F69375520ab01377ce7B88f5BA8C48F8D666", wallet);

    let calls = [
        [
            0,
            "0x471EcE3750Da237f93B8E339c536989b8978a438",
            "0",
            "0x095ea7b3000000000000000000000000e3d8bd6aed4f159bc8000a9cd47cffdb95f961210000000000000000000000000000000000000000000000008ac7230489e80000",
            "0x",
        ],
        [
            0,
            "0xE3D8bd6Aed4F159bc8000a9cD47CffDb95F96121",
            "0",
            //   swapExactTokensForTokens(uint256,uint256,address[],address,uint256)
            "0x38ed17390000000000000000000000000000000000000000000000008ac7230489e8000000000000000000000000000000000000000000000000000005df289eecf7a23e00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000004fd39c9e151e50580779bd04b1f7ecc310079fd30000000000000000000000000000000000000000000000000000000065210f0b0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000471ece3750da237f93b8e339c536989b8978a438000000000000000000000000765de816845861e75a25fca122bb6898b8b1282a",
            "0x",
        ],
        [
            1,
            "0x765DE816845861e75A25fCA122bb6898B8B1282a",
            "0",
            "0x095ea7b30000000000000000000000009be5da31c7a42d7e045189ac1822d1fa5838e6350000000000000000000000000000000000000000000000000000000000000000",
            "0x000000000000000000000000765de816845861e75a25fca122bb6898b8b1282a0000000000000000000000000000000000000000000000000000000000000001",
        ],
        [
            1,
            "0x9Be5da31c7A42d7e045189ac1822D1fA5838e635",
            "0",
            "0xddc1f59d000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003ae519360d45fc410000000000000000000000000000000000000000000000000000000000405e01000000000000000000000000ce16f69375520ab01377ce7b88f5ba8c48f8d666",
            "0x000000000000000000000000765de816845861e75a25fca122bb6898b8b1282a0000000000000000000000000000000000000000000000000000000000000002",
        ],
    ];

    let token = "0x471EcE3750Da237f93B8E339c536989b8978a438";
    let amount = "10000000000000000000";
    let destinationAddress = "0xce16F69375520ab01377ce7B88f5BA8C48F8D666";

    let payload =
        "0x0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000644a66b76e740d98f0d23c3ae942163bb43078c1000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000005a0000000000000000000000000000000000000000000000000000000000000072000000000000000000000000000000000000000000000000000000000000009400000000000000000000000000000000000000000000000000000000000000aa000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000750e4c4984a9e0f12978ea6742bc1c5d248f40ed0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000750e4c4984a9e0f12978ea6742bc1c5d248f40ed000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000044095ea7b3000000000000000000000000f9c2b5746c946ef883ab2660bbbb1f10a5bdeab40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000750e4c4984a9e0f12978ea6742bc1c5d248f40ed00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000f9c2b5746c946ef883ab2660bbbb1f10a5bdeab4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000104a8c9ed67000000000000000000000000750e4c4984a9e0f12978ea6742bc1c5d248f40ed0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000000080000000000000000000000004fd39c9e151e50580779bd04b1f7ecc310079fd30000000000000000000000000000000000000000000000000000018a6dd5b156000000000000000000000000000000000000000000000000000000000040b11e0000000000000000000000000000000000000000000000000000000000403e400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000750e4c4984a9e0f12978ea6742bc1c5d248f40ed000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000010000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000044095ea7b300000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc4500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc45000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000000e404e45aaf0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf127000000000000000000000000000000000000000000000000000000000000000640000000000000000000000004fd39c9e151e50580779bd04b1f7ecc310079fd3000000000000000000000000000000000000000000000000000000000040b27f000000000000000000000000000000000000000000000000678b35582742910400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000242e1a7d4d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf127000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000644a66b76e740d98f0d23c3ae942163bb43078c1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    let t = await ethers.getContractAt(ERC20, token, wallet);

    // await (await t.approve("0xce16F69375520ab01377ce7B88f5BA8C48F8D666", amount)).wait();

    await (
        await s.callBridgeCall(
            token,
            amount,
            calls,
            "axlUSDC",
            "Polygon",
            destinationAddress,
            payload,
            wallet.address,
            true,
            { value: "632858639860791200", gasLimit: 2000000 }
        )
    ).wait();
}

async function verify() {
    let [wallet] = await ethers.getSigners();
    let abi = [
        "function verifyProofData(uint256 _chainId, bytes memory _receiptProof) external view returns (bool success, string memory message,bytes memory logs)",
    ];
    let router = await ethers.getContractAt(abi, "0x624e6f327c4f91f1fa6285711245c215de264d49", wallet);
    let data = "";
    let result = await router.verifyProofData(137, data);

    console.log(result);
}

async function decodeB() {
    let [wallet] = await ethers.getSigners();
    console.log(wallet.address);
    let Router = await ethers.getContractFactory("ButterRouterV2");
    let router = Router.attach("0x47be4c04c91d4897f8f27d32c7d79357b0939a91");

    // console.log(await router.approved("0x63212C5F70D1b374A023950a96bE3506779cAe24"));

    // console.log(await router.getFee("309452415502341394","0x0000000000000000000000000000000000000000",1))

    // console.log(await router.getInputBeforeFee("307286248593825004","0x0000000000000000000000000000000000000000",1))

    let data =
        "0x480a3411000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000820000000000000000000000000000000000000000000000000000000000000074000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d8b8af810d52e8c7d68721e799a0b79c1eaa1a4d000000000000000000000000d8b8af810d52e8c7d68721e799a0b79c1eaa1a4d000000000000000000000000c737deb9459fc54ea358ca93ef1bf2919ac9ab5c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000169b100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000604efa064650000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000644a66b76e740d98f0d23c3ae942163bb43078c100000000000000000000000000000000000000000000000000000000000169b100000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c9e0ac33f138216c50638d71c344a299d0d10300000000000000000000000003c9e0ac33f138216c50638d71c344a299d0d103000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000404cef95229000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000169b1000000000000000000000000d8b8af810d52e8c7d68721e799a0b79c1eaa1a4d0000000000000000000000000000000000000000000000000000018b7ac52a5900000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000891cdb91d149f23b1a45d9c5ca78a88d0cb44c18000000000000000000000000a614f803b6fd780986a42c78ec9c7f77e6ded13c0000000000000000000000003487b63d30b5b2c87fb7ffa8bcfade38eaac1abe0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000276320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002763300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000117573646332706f6f6c747573647573647400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    let f = Router.interface.decodeFunctionData("swapAndBridge", data);
    console.log(f);

    if (f._swapData !== "0x") {
        let swapData = ethers.utils.defaultAbiCoder.decode(
            ["tuple(uint8,address,address,address,address,uint256,bytes)"],
            f._swapData
        );
        console.log("swapData==================", swapData);
    }
    // console.log(await router.owner());

    // await (await router.setAuthorization("0xf5b509bB0909a69B1c207E495f687a596C168E12",true)).wait();

    if (f._bridgeData !== "0x") {
        let callData = ethers.utils.defaultAbiCoder.decode(["tuple(uin256,bytes,bytes)"], f._bridgeData);
        console.log("callData=========================", callData);
    }
}

async function decode() {
    let [wallet] = await ethers.getSigners();
    console.log(wallet.address);
    let Router = await ethers.getContractFactory("ButterRouterPlus");
    let router = Router.attach("0x47be4c04c91d4897f8f27d32c7d79357b0939a91");

    // console.log(await router.approved("0x63212C5F70D1b374A023950a96bE3506779cAe24"));

    // console.log(await router.getFee("309452415502341394","0x0000000000000000000000000000000000000000",1))

    // console.log(await router.getInputBeforeFee("307286248593825004","0x0000000000000000000000000000000000000000",1))

    let data =
        "0xecc847d3346563646335613834336534323234326433376535663263326432323963626100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004563918244f40001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000c2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000063212c5f70d1b374a023950a96be3506779cae2400000000000000000000000063212c5f70d1b374a023950a96be3506779cae240000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000644a66b76e740d98f0d23c3ae942163bb43078c100000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000009e4480a341100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004563918244f4000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000048000000000000000000000000000000000000000000000000000000000000009c000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004aab00833fd5f13d03115559277b0b8cc0a5ff360000000000000000000000004aab00833fd5f13d03115559277b0b8cc0a5ff36000000000000000000000000644a66b76e740d98f0d23c3ae942163bb43078c10000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000000000000000000000000000005c6f883bd979600000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000284efa06465000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000644a66b76e740d98f0d23c3ae942163bb43078c10000000000000000000000000000000000000000000000000005c6f883bd979600000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc4500000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc450000000000000000000000000000000000000000000000004563918244f4000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000005c6f883bd97960000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002b0d500b1d8e8ef31e21c99d1db9a6444d3adf12700001f47ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000014644a66b76e740d98f0d23c3ae942163bb43078c100000000000000000000000000000000000000000000000000000000000000000000000000000000000004400000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004aab00833fd5f13d03115559277b0b8cc0a5ff360000000000000000000000004aab00833fd5f13d03115559277b0b8cc0a5ff36000000000000000000000000644a66b76e740d98f0d23c3ae942163bb43078c100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011291461b548ed00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000284efa0646500000000000000000000000000000000000000000000000000000000000000200000000000000000000000002170ed0880ac9a755fd29b2688956bd959f933f800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000644a66b76e740d98f0d23c3ae942163bb43078c10000000000000000000000000000000000000000000000000011291461b548ed00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000000000000000000000000000000002486a47baf25400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000011291461b548ed000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000002170ed0880ac9a755fd29b2688956bd959f933f8000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    let f = Router.interface.decodeFunctionData("swapAndCall", data);
    console.log(f);

    if (f._swapData !== "0x") {
        let swapData = ethers.utils.defaultAbiCoder.decode(
            ["tuple(uint8,address,address,address,address,uint256,bytes)"],
            f._swapData
        );
        console.log("swapData==================", swapData);
    }
    // console.log(await router.owner());

    // await (await router.setAuthorization("0xf5b509bB0909a69B1c207E495f687a596C168E12",true)).wait();

    if (f._callbackData !== "0x") {
        let callData = ethers.utils.defaultAbiCoder.decode(
            ["tuple(address,address,uint256,uint256,address,bytes)"],
            f._callbackData
        );
        console.log("callData=========================", callData);
    }
}

async function approve() {
    let abi = ["function setAuthorization(address  _excutor, bool _flag) external"];
    let rubic = "0x3335733c454805df6a77f825f266e136fb4a3333";
    let [wallet] = await ethers.getSigners();
    console.log(wallet.address);
    let router_addr = "0xDC836538aCec08300d548A89889fEdf3BcAbD218";
    let router = await ethers.getContractAt(abi, router_addr, wallet);

    await (await router.setAuthorization(rubic, true)).wait();
}

async function testwrap() {
    let [wallet] = await ethers.getSigners();
    let router_addr = "0x02Db591cECbB6A5dFdc5104bCF434d14fa992747";
    let Router = await ethers.getContractFactory("ButterRouterV2");
    let router = Router.attach(router_addr);
    let srcToken = ethers.constants.AddressZero;
    let amount = ethers.utils.parseEther("0.01");
    let payload = "0xd0e30db0";
    let swapParam = {
        dexType: 0,
        executor: "0xae13d989dac2f0debff460ac112a837c89baa7cd",
        approveTo: "0xae13d989dac2f0debff460ac112a837c89baa7cd",
        receiver: wallet.address,
        dstToken: "0xae13d989dac2f0debff460ac112a837c89baa7cd",
        minReturnAmount: 1,
        data: payload,
    };

    let permitData = "0x";

    let bridgeData = "0x";

    let swapData = ethers.utils.defaultAbiCoder.encode(
        ["tuple(uint8,address,address,address,address,uint256,bytes)"],
        [
            [
                swapParam.dexType,
                swapParam.executor,
                swapParam.approveTo,
                swapParam.receiver,
                swapParam.dstToken,
                swapParam.minReturnAmount,
                swapParam.data,
            ],
        ]
    );

    await (await router.swapAndBridge(srcToken, amount, swapData, bridgeData, permitData, { value: amount })).wait();
}

async function testunWrap() {
    let [wallet] = await ethers.getSigners();
    let router_addr = "0x02Db591cECbB6A5dFdc5104bCF434d14fa992747";
    let Router = await ethers.getContractFactory("ButterRouterV2");
    let router = Router.attach(router_addr);
    let srcToken = "0xae13d989dac2f0debff460ac112a837c89baa7cd";
    let amount = ethers.utils.parseEther("0.01");
    let payload = "0x2e1a7d4d".concat(ethers.utils.defaultAbiCoder.encode(["uint256"], [amount]).substring(2));
    console.log(payload);
    let swapParam = {
        dexType: 0,
        executor: "0xae13d989dac2f0debff460ac112a837c89baa7cd",
        approveTo: "0xae13d989dac2f0debff460ac112a837c89baa7cd",
        receiver: wallet.address,
        dstToken: ethers.constants.AddressZero,
        minReturnAmount: 1,
        data: payload,
    };

    let permitData = "0x";

    let bridgeData = "0x";

    let token = await ethers.getContractAt(ERC20, srcToken, wallet);

    await (await token.approve(router.address, amount)).wait();

    let swapData = ethers.utils.defaultAbiCoder.encode(
        ["tuple(uint8,address,address,address,address,uint256,bytes)"],
        [
            [
                swapParam.dexType,
                swapParam.executor,
                swapParam.approveTo,
                swapParam.receiver,
                swapParam.dstToken,
                swapParam.minReturnAmount,
                swapParam.data,
            ],
        ]
    );

    await (await router.swapAndBridge(srcToken, amount, swapData, bridgeData, permitData)).wait();
}

async function testCrossChain() {
    let [wallet] = await ethers.getSigners();
    console.log(wallet.address);
    let router_addr = "0xBfD91826b9bca62b6f90Caba3a3b933BA86f2f5A";
    let Router = await ethers.getContractFactory("ButterRouterV2");
    let router = Router.attach(router_addr);

    //   function swapAndBridge(
    //     address _srcToken,
    //     uint256 _amount,
    //     bytes calldata _swapData,
    //     bytes calldata _bridgeData,
    //     bytes calldata _permitData
    // ) external

    //   struct SwapParam {
    //     uint8 dexType;
    //     address executor;
    //     address approveTo;
    //     address receiver;
    //     address dstToken;
    //     uint256 minReturnAmount;
    //     bytes data;
    // }

    // struct BridgeParam {
    //     uint256 toChain;
    //     bytes receiver;
    //     bytes data;
    // }

    let srcToken = "0xd8f69e1F100Db655d4503545C3BB308CAab4a3B6";
    let dstToken = "0xd29A1a2025Dc30D7DC18764a36aBF47B93AdaE61";
    let amunt = ethers.utils.parseEther("185");

    let toChain = 212;

    let executor = "0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff";
    let deadline = Date.now() + 3600 * 1000;
    let swap = await ethers.getContractAt(swap_abi, executor, wallet);

    let payload = swap.interface.encodeFunctionData("swapExactTokensForTokens", [
        amunt,
        0,
        [srcToken, dstToken],
        router_addr,
        deadline,
    ]);
    //let payload = swap.interface.encodeFunctionData("swapExactETHForTokens",[0,[srcToken,dstToken],router_addr,deadline])
    let swapParam = {
        dexType: 0,
        executor: executor,
        approveTo: executor,
        receiver: wallet.address,
        dstToken: dstToken,
        minReturnAmount: 1,
        data: payload,
    };

    let permitData = "0x";

    let swapData = ethers.utils.defaultAbiCoder.encode(
        ["tuple(uint8,address,address,address,address,uint256,bytes)"],
        [
            [
                swapParam.dexType,
                swapParam.executor,
                swapParam.approveTo,
                swapParam.receiver,
                swapParam.dstToken,
                swapParam.minReturnAmount,
                swapParam.data,
            ],
        ]
    );
    let remoteAmount = "185000000";
    let remoteExecutor = "0x3780971DD8Be8fd7d65556f4afc79d6B987f9460";
    let remoteSwapRouter = "0xf479BD49E55cf47474056Ef168B0E0709DDF1830";
    let remoteDstToken = "0xd28c1187168dA9df1B7f6cb8495e659322D27c9F";
    let remoteSrcToken = "0x292cB08f506A5579310c34E177eA1A542b9975ae";
    let remotePayload = ethers.utils.defaultAbiCoder.encode(
        ["uint256", "address[]"],
        [1, [remoteSrcToken, remoteDstToken]]
    );

    let SwapData = {
        dexType: 1,
        callTo: remoteSwapRouter,
        approveTo: remoteSwapRouter,
        fromAmount: remoteAmount,
        callData: remotePayload,
    };
    let swaps = [SwapData];

    let param = {
        srcToken: remoteSrcToken,
        dstToken: remoteDstToken,
        receiver: router.address,
        leftRecerver: wallet.address,
        minAmount: 0,
        swaps: swaps,
    };
    let AggregationAdapter = await ethers.getContractFactory("AggregationAdapter");

    let data = AggregationAdapter.interface.encodeFunctionData("swap", [param]);

    let swapAndCall = ethers.utils.defaultAbiCoder.encode(
        ["tuple(uint8,address,address,address,address,uint256,bytes)"],
        [[0, remoteExecutor, remoteExecutor, wallet.address, remoteDstToken, 0, data]]
    );

    let remoteCall = "0x";

    let remoteData = ethers.utils.defaultAbiCoder.encode(["bytes", "bytes"], [swapAndCall, remoteCall]);

    let bridgeData = ethers.utils.defaultAbiCoder.encode(
        ["tuple(uint256,bytes,bytes)"],
        [[toChain, wallet.address, remoteData]]
    );

    let token = await ethers.getContractAt(ERC20, srcToken, wallet);

    await (await token.approve(router.address, amunt)).wait();
    await (await router.swapAndBridge(srcToken, amunt, swapData, bridgeData, permitData)).wait();
}

async function testPemmit() {
    let [wallet] = await ethers.getSigners();
    console.log(wallet.address);
    let router_addr = "0xd371e6A8979F554801C04F2d3397b273953BBac8";
    let Router = await ethers.getContractFactory("ButterRouterV2");
    let router = Router.attach(router_addr);

    let srcToken = "0x07fa3C25Da9C733b6F871e73cA002Ef0477742A3";
    let dstToken = "0xd8f69e1F100Db655d4503545C3BB308CAab4a3B6";
    let amunt = ethers.utils.parseEther("18500");

    let executor = "0x6710b000cc6728e068c095b66535e1a8b552e816";
    let deadline = Date.now() + 3600 * 1000;
    let swap = await ethers.getContractAt(swap_abi, executor, wallet);

    let payload = swap.interface.encodeFunctionData("swapExactTokensForTokens", [
        ethers.utils.parseEther("18400"),
        0,
        [srcToken, dstToken],
        router_addr,
        deadline,
    ]);
    //let payload = swap.interface.encodeFunctionData("swapExactETHForTokens",[0,[srcToken,dstToken],router_addr,deadline])
    let swapParam = {
        dexType: 0,
        executor: executor,
        approveTo: executor,
        receiver: wallet.address,
        dstToken: dstToken,
        minReturnAmount: 0,
        data: payload,
    };
    let swapData = ethers.utils.defaultAbiCoder.encode(
        ["tuple(uint8,address,address,address,address,uint256,bytes)"],
        [
            [
                swapParam.dexType,
                swapParam.executor,
                swapParam.approveTo,
                swapParam.receiver,
                swapParam.dstToken,
                swapParam.minReturnAmount,
                swapParam.data,
            ],
        ]
    );
    let permitData = await pemmit(wallet, router_addr, amunt, deadline, srcToken);

    await (await router.swapAndCall(ethers.constants.HashZero, srcToken, amunt, 1, swapData, "0x", permitData)).wait();
}

async function pemmit(owner, spender, amount, deadline, token) {
    let abi = [
        "function name() public view returns(string memory)",
        "function nonces(address user) public view returns(uint256)",
    ];
    let network = await ethers.provider.getNetwork();

    let myToken = await ethers.getContractAt(abi, token, owner);
    // get the current nonce for the deployer address
    const nonces = await myToken.nonces(owner.address);

    // set the domain parameters
    const domain = {
        name: await myToken.name(),
        version: "1",
        chainId: network.chainId,
        verifyingContract: myToken.address,
    };

    // set the Permit type parameters
    const types = {
        Permit: [
            {
                name: "owner",
                type: "address",
            },
            {
                name: "spender",
                type: "address",
            },
            {
                name: "value",
                type: "uint256",
            },
            {
                name: "nonce",
                type: "uint256",
            },
            {
                name: "deadline",
                type: "uint256",
            },
        ],
    };

    // set the Permit type values
    const values = {
        owner: owner.address,
        spender: spender,
        value: amount,
        nonce: nonces,
        deadline: deadline,
    };

    // sign the Permit type data with the deployer's private key
    const signature = await owner._signTypedData(domain, types, values);

    // split the signature into its components
    const sig = ethers.utils.splitSignature(signature);

    return ethers.utils.defaultAbiCoder.encode(
        ["address", "address", "address", "uint256", "uint256", "uint8", "bytes32", "bytes32"],
        [token, owner.address, spender, amount, deadline, sig.v, sig.r, sig.s]
    );
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
    console.error(error);
    process.exitCode = 1;
});
